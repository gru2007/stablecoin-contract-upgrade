#include "stdlib.fc";
#include "extlib.func";

#include "op.func";
#include "err.func";

#include "storage.func";
#include "index.func";


() recv_internal(int balance, int msg_value, cell msg, slice msg_body) impure {
    slice slice_msg = msg.begin_parse();
    throw_if(0, slice_msg~load_uint(4) & 1);

    slice sender_addr = slice_msg~load_msg_addr();
    throw_unless(err::addr_format(), extlib::basechsmpl_addr?(sender_addr));

    int op = msg_body~load_uint(32);

    if (op == op::transfer_notification()) { 
        handle_int::transfer_notification(sender_addr); 
    }

    if (op == op::change_settings()) { 
        handle_int::change_settings(msg_body, sender_addr); 
    }
    
    if (op == op::upgrade) {
        throw_unless(error::not_owner, equal_slices_bits(sender_address, storage::owner_addr));
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        in_msg_body.end_parse();
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    if (op == op::top_up) {
        return (); ;; just accept tons
    }

    throw(err::not_found());
}

() recv_external(slice in_msg) impure {
    if (in_msg.preload_uint(32) == op::mine()) { 
        handle_ext::mine(in_msg); 
    }

    throw(err::not_found());
}

;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

;; gets (seed, pow_complexity, amount, interval)
(int, int, int, int) get_pow_params() method_id {

    var ds = get_data().begin_parse();
  var (owner_addr, jwall_addr, seed, pow_complexity) = (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_uint(128), ds~load_uint(256));
  return (seed, pow_complexity, 0x174876e800, 0x64);
}